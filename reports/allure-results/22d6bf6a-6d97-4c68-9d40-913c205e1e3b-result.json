{"name": "Create Customer in IMS Application", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Customer with Name 'Jackey Dada' and Mobile Number '9102941023' already exists.Duplicate Mobile Number '9102941023' detected. Duplicate VAT Number '6979' detected. \nMessage: unexpected alert open: {Alert text : Customer with Name 'Jackey Dada' and Mobile Number '9102941023' already exists.Duplicate Mobile Number '9102941023' detected. Duplicate VAT Number '6979' detected. }\n  (Session info: chrome=141.0.7390.123)\nStacktrace:\n\tGetHandleVerifier [0x0x113fe43+66515]\n\tGetHandleVerifier [0x0x113fe84+66580]\n\t(No symbol) [0x0xf2dc48]\n\t(No symbol) [0x0xfbd49e]\n\t(No symbol) [0x0xf9afc6]\n\t(No symbol) [0x0xf6c2ca]\n\t(No symbol) [0x0xf6d154]\n\tGetHandleVerifier [0x0x1397353+2521315]\n\tGetHandleVerifier [0x0x13922d3+2500707]\n\tGetHandleVerifier [0x0x1167c94+229924]\n\tGetHandleVerifier [0x0x11581f8+165768]\n\tGetHandleVerifier [0x0x115ecad+193085]\n\tGetHandleVerifier [0x0x1148158+100072]\n\tGetHandleVerifier [0x0x11482f0+100480]\n\tGetHandleVerifier [0x0x11325aa+11066]\n\tBaseThreadInitThunk [0x0x75ca5d49+25]\n\tRtlInitializeExceptionChain [0x0x7793d6db+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x7793d661+561]", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"624aeb35e49ddee2fb666d8d9d931697\")>\n\n    @allure.title(\"Create Customer in IMS Application\")\n    @allure.description(\"Logs in, navigates to Customer Master, and creates a new customer record.\")\n    def test_create_customer(setup):\n        driver = setup\n        wait = WebDriverWait(driver, 30)\n    \n        # --- Step 1: Login ---\n        login = Login(driver)\n        driver.get(\"https://redmiims.webredirect.himshang.com.np/#/login\")\n        login.perform_login(\"Paras\", \"Ims@1234\")\n        print(\"✅ Logged into IMS\")\n    \n        # Optional: handle logout from previous session\n        try:\n            login.perform_logout()\n            login.perform_ok()\n        except:\n            pass\n    \n        login.click_signin()\n        print(\"✅ Clicked Sign In\")\n    \n        # --- Step 2: Create Customer ---\n        customer = Customer(driver)\n>       customer.create_customer(\n            name=\"Jackey Dada\",\n            address=\"Dallas USA\",\n            vat_no=\"6979\",\n            email=\"jaceyho@gmail.com\",\n            mobile=\"9102941023\"\n        )\n\nPYTEST\\tests\\test_Customer.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPYTEST\\pages\\Add_Customer.py:65: in create_customer\n    self.wait.until(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:104: in _predicate\n    return driver.find_element(*locator)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:926: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000138557ECA50>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Customer with Name \\'Jackey Dada\\' and Mobile Number \\'9102941023\\...]\\\\n\\\\tRtlInitializeExceptionChain [0x0x7793d6db+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x7793d661+561]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        Args:\n            response: The JSON response from the WebDriver server as a dictionary\n                object.\n    \n        Raises:\n            WebDriverException: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Customer with Name 'Jackey Dada' and Mobile Number '9102941023' already exists.Duplicate Mobile Number '9102941023' detected. Duplicate VAT Number '6979' detected. \nE           Message: unexpected alert open: {Alert text : Customer with Name 'Jackey Dada' and Mobile Number '9102941023' already exists.Duplicate Mobile Number '9102941023' detected. Duplicate VAT Number '6979' detected. }\nE             (Session info: chrome=141.0.7390.123)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x0x113fe43+66515]\nE           \tGetHandleVerifier [0x0x113fe84+66580]\nE           \t(No symbol) [0x0xf2dc48]\nE           \t(No symbol) [0x0xfbd49e]\nE           \t(No symbol) [0x0xf9afc6]\nE           \t(No symbol) [0x0xf6c2ca]\nE           \t(No symbol) [0x0xf6d154]\nE           \tGetHandleVerifier [0x0x1397353+2521315]\nE           \tGetHandleVerifier [0x0x13922d3+2500707]\nE           \tGetHandleVerifier [0x0x1167c94+229924]\nE           \tGetHandleVerifier [0x0x11581f8+165768]\nE           \tGetHandleVerifier [0x0x115ecad+193085]\nE           \tGetHandleVerifier [0x0x1148158+100072]\nE           \tGetHandleVerifier [0x0x11482f0+100480]\nE           \tGetHandleVerifier [0x0x11325aa+11066]\nE           \tBaseThreadInitThunk [0x0x75ca5d49+25]\nE           \tRtlInitializeExceptionChain [0x0x7793d6db+107]\nE           \tRtlGetAppContainerNamedObjectPath [0x0x7793d661+561]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: UnexpectedAlertPresentException"}, "description": "Logs in, navigates to Customer Master, and creates a new customer record.", "steps": [{"name": "Create a new customer", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Customer with Name 'Jackey Dada' and Mobile Number '9102941023' already exists.Duplicate Mobile Number '9102941023' detected. Duplicate VAT Number '6979' detected. \nMessage: unexpected alert open: {Alert text : Customer with Name 'Jackey Dada' and Mobile Number '9102941023' already exists.Duplicate Mobile Number '9102941023' detected. Duplicate VAT Number '6979' detected. }\n  (Session info: chrome=141.0.7390.123)\nStacktrace:\n\tGetHandleVerifier [0x0x113fe43+66515]\n\tGetHandleVerifier [0x0x113fe84+66580]\n\t(No symbol) [0x0xf2dc48]\n\t(No symbol) [0x0xfbd49e]\n\t(No symbol) [0x0xf9afc6]\n\t(No symbol) [0x0xf6c2ca]\n\t(No symbol) [0x0xf6d154]\n\tGetHandleVerifier [0x0x1397353+2521315]\n\tGetHandleVerifier [0x0x13922d3+2500707]\n\tGetHandleVerifier [0x0x1167c94+229924]\n\tGetHandleVerifier [0x0x11581f8+165768]\n\tGetHandleVerifier [0x0x115ecad+193085]\n\tGetHandleVerifier [0x0x1148158+100072]\n\tGetHandleVerifier [0x0x11482f0+100480]\n\tGetHandleVerifier [0x0x11325aa+11066]\n\tBaseThreadInitThunk [0x0x75ca5d49+25]\n\tRtlInitializeExceptionChain [0x0x7793d6db+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x7793d661+561]\n\n", "trace": "  File \"d:\\Code Playground\\Selenium Tutorial\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"D:\\Code Playground\\Selenium Tutorial\\PYTEST\\pages\\Add_Customer.py\", line 65, in create_customer\n    self.wait.until(\n    ~~~~~~~~~~~~~~~^\n        EC.presence_of_element_located((By.XPATH, \"//div[contains(text(),'Customer saved successfully')]\"))\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"d:\\Code Playground\\Selenium Tutorial\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 129, in until\n    value = method(self._driver)\n  File \"d:\\Code Playground\\Selenium Tutorial\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 104, in _predicate\n    return driver.find_element(*locator)\n           ~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"d:\\Code Playground\\Selenium Tutorial\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 926, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"d:\\Code Playground\\Selenium Tutorial\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 458, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"d:\\Code Playground\\Selenium Tutorial\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"}, "steps": [{"name": "Hover and click an element", "status": "passed", "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"624aeb35e49ddee2fb666d8d9d931697\", element=\"f.EEFC66FE417F3CD9553BFF0FF094CDCF.d.F852D9C652D0B3E6DD53352C614890D0.e.52\")>"}], "start": 1761895091144, "stop": 1761895091439}, {"name": "Scroll and click element", "status": "passed", "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"624aeb35e49ddee2fb666d8d9d931697\", element=\"f.EEFC66FE417F3CD9553BFF0FF094CDCF.d.F852D9C652D0B3E6DD53352C614890D0.e.67\")>"}], "start": 1761895091866, "stop": 1761895092659}, {"name": "Scroll and click element", "status": "passed", "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"624aeb35e49ddee2fb666d8d9d931697\", element=\"f.EEFC66FE417F3CD9553BFF0FF094CDCF.d.F852D9C652D0B3E6DD53352C614890D0.e.97\")>"}], "start": 1761895094793, "stop": 1761895095434}], "parameters": [{"name": "name", "value": "'Jackey Dada'"}, {"name": "address", "value": "'Dallas USA'"}, {"name": "vat_no", "value": "'6979'"}, {"name": "email", "value": "'jaceyho@gmail.com'"}, {"name": "mobile", "value": "'9102941023'"}], "start": 1761895080479, "stop": 1761895096325}], "attachments": [{"name": "Screenshot_test_create_customer", "source": "99b2d14b-aaa6-4dd6-ba0e-c09e856b6ea5-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "ac35427c-969c-4a7e-9576-930e41afa14b-attachment.txt", "type": "text/plain"}], "start": 1761895065981, "stop": 1761895096345, "uuid": "7dc76b27-39d1-42e9-b3f4-c3777a7d270f", "historyId": "86ca7be43ee3b3654a03dfb9826df36b", "testCaseId": "86ca7be43ee3b3654a03dfb9826df36b", "fullName": "PYTEST.tests.test_Customer#test_create_customer", "labels": [{"name": "parentSuite", "value": "PYTEST.tests"}, {"name": "suite", "value": "test_Customer"}, {"name": "host", "value": "DESKTOP-FK66NC3"}, {"name": "thread", "value": "20828-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "PYTEST.tests.test_Customer"}], "titlePath": ["PYTEST", "tests", "test_Customer.py"]}