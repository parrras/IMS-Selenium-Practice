{"name": "Create Customer in IMS Application", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=141.0.7390.123)\nStacktrace:\n\tGetHandleVerifier [0x0xb0fe43+66515]\n\tGetHandleVerifier [0x0xb0fe84+66580]\n\t(No symbol) [0x0x8fdc48]\n\t(No symbol) [0x0x8dc18d]\n\t(No symbol) [0x0x971a4e]\n\t(No symbol) [0x0x98c4d9]\n\t(No symbol) [0x0x96afc6]\n\t(No symbol) [0x0x93c2ca]\n\t(No symbol) [0x0x93d154]\n\tGetHandleVerifier [0x0xd67353+2521315]\n\tGetHandleVerifier [0x0xd622d3+2500707]\n\tGetHandleVerifier [0x0xb37c94+229924]\n\tGetHandleVerifier [0x0xb281f8+165768]\n\tGetHandleVerifier [0x0xb2ecad+193085]\n\tGetHandleVerifier [0x0xb18158+100072]\n\tGetHandleVerifier [0x0xb182f0+100480]\n\tGetHandleVerifier [0x0xb025aa+11066]\n\tBaseThreadInitThunk [0x0x75ca5d49+25]\n\tRtlInitializeExceptionChain [0x0x7793d6db+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x7793d661+561]", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"82979a9da3025c1ad2e55b65a9c03e14\")>\n\n    @allure.title(\"Create Customer in IMS Application\")\n    @allure.description(\"Logs in, navigates to Customer Master, and creates a new customer record.\")\n    def test_create_customer(setup):\n        driver = setup\n        wait = WebDriverWait(driver, 30)\n    \n        # --- Step 1: Login ---\n        login = Login(driver)\n        driver.get(\"https://redmiims.variantqa.himshang.com.np/#/login\")\n>       login.perform_login(\"Paras\", \"Ims@1234\")\n\nPYTEST\\tests\\test_Customer.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPYTEST\\pages\\Login_Page.py:17: in perform_login\n    self.driver.get(\"https://redmiims.variantqa.himshang.com.np/#/login\")\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:483: in get\n    self.execute(Command.GET, {\"url\": url})\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F9600336F0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...]\\\\n\\\\tRtlInitializeExceptionChain [0x0x7793d6db+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x7793d661+561]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        Args:\n            response: The JSON response from the WebDriver server as a dictionary\n                object.\n    \n        Raises:\n            WebDriverException: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=141.0.7390.123)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0xb0fe43+66515]\nE       \tGetHandleVerifier [0x0xb0fe84+66580]\nE       \t(No symbol) [0x0x8fdc48]\nE       \t(No symbol) [0x0x8dc18d]\nE       \t(No symbol) [0x0x971a4e]\nE       \t(No symbol) [0x0x98c4d9]\nE       \t(No symbol) [0x0x96afc6]\nE       \t(No symbol) [0x0x93c2ca]\nE       \t(No symbol) [0x0x93d154]\nE       \tGetHandleVerifier [0x0xd67353+2521315]\nE       \tGetHandleVerifier [0x0xd622d3+2500707]\nE       \tGetHandleVerifier [0x0xb37c94+229924]\nE       \tGetHandleVerifier [0x0xb281f8+165768]\nE       \tGetHandleVerifier [0x0xb2ecad+193085]\nE       \tGetHandleVerifier [0x0xb18158+100072]\nE       \tGetHandleVerifier [0x0xb182f0+100480]\nE       \tGetHandleVerifier [0x0xb025aa+11066]\nE       \tBaseThreadInitThunk [0x0x75ca5d49+25]\nE       \tRtlInitializeExceptionChain [0x0x7793d6db+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7793d661+561]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:233: NoSuchWindowException"}, "description": "Logs in, navigates to Customer Master, and creates a new customer record.", "start": 1761911451363, "stop": 1761911452416, "uuid": "3c71a89c-c914-4f0b-b8a8-37010abdc766", "historyId": "86ca7be43ee3b3654a03dfb9826df36b", "testCaseId": "86ca7be43ee3b3654a03dfb9826df36b", "fullName": "PYTEST.tests.test_Customer#test_create_customer", "labels": [{"name": "parentSuite", "value": "PYTEST.tests"}, {"name": "suite", "value": "test_Customer"}, {"name": "host", "value": "DESKTOP-FK66NC3"}, {"name": "thread", "value": "8832-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "PYTEST.tests.test_Customer"}], "titlePath": ["PYTEST", "tests", "test_Customer.py"]}