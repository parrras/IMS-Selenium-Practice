{"name": "Add Products and Generate Invoice in IMS Application", "status": "failed", "statusDetails": {"message": "Failed: ‚ùå Purchase Invoice test failed due to: Message:", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d1b320ce03d7fd27d23f32eb39d686d7\")>\n\n    @allure.title(\"Add Products and Generate Invoice in IMS Application\")\n    @allure.description(\"Logs in, navigates to Product Master, adds 10 products, and generates a purchase invoice.\")\n    def test_generate_purchase_invoice(setup):\n        driver = setup\n        wait = WebDriverWait(driver, 30)\n        login = Login(driver)\n    \n        try:\n            # --- Step 1: Login ---\n            driver.get(\"https://redmiims.variantqa.himshang.com.np/#/login\")\n            login.perform_login(\"Paras\", \"Ims@1234\")\n            print(\"‚úÖ Logged into IMS\")\n    \n            # Optional: handle logout from previous session\n            try:\n                login.perform_logout()\n                login.perform_ok()\n            except Exception:\n                pass\n    \n            login.click_signin()\n            print(\"‚úÖ Clicked Sign In\")\n    \n            invoice_page = PurchaseInvoicePage(driver)\n    \n            # --- Step 1: Navigate and Generate Invoice ---\n>           invoice_page.generate_invoice()\n\nPYTEST\\tests\\Purchase_Inv_test.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPYTEST\\pages\\Purchase_Invoice.py:90: in generate_invoice\n    save_invoice_btn = wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"d1b320ce03d7fd27d23f32eb39d686d7\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x00000148802C7560>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d1b320ce03d7fd27d23f32eb39d686d7\")>\n\n    @allure.title(\"Add Products and Generate Invoice in IMS Application\")\n    @allure.description(\"Logs in, navigates to Product Master, adds 10 products, and generates a purchase invoice.\")\n    def test_generate_purchase_invoice(setup):\n        driver = setup\n        wait = WebDriverWait(driver, 30)\n        login = Login(driver)\n    \n        try:\n            # --- Step 1: Login ---\n            driver.get(\"https://redmiims.variantqa.himshang.com.np/#/login\")\n            login.perform_login(\"Paras\", \"Ims@1234\")\n            print(\"‚úÖ Logged into IMS\")\n    \n            # Optional: handle logout from previous session\n            try:\n                login.perform_logout()\n                login.perform_ok()\n            except Exception:\n                pass\n    \n            login.click_signin()\n            print(\"‚úÖ Clicked Sign In\")\n    \n            invoice_page = PurchaseInvoicePage(driver)\n    \n            # --- Step 1: Navigate and Generate Invoice ---\n            invoice_page.generate_invoice()\n            print(\"üßæ Purchase invoice generated successfully.\")\n    \n            allure.attach(\n                \"‚úÖ Purchase invoice test completed successfully\",\n                name=\"Result\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n    \n        except Exception as e:\n            # Capture screenshot and log error details for Allure\n            allure.attach(driver.get_screenshot_as_png(), name=\"Error Screenshot\",\n                          attachment_type=allure.attachment_type.PNG)\n            allure.attach(str(e), name=\"Error Details\", attachment_type=allure.attachment_type.TEXT)\n>           pytest.fail(f\"‚ùå Purchase Invoice test failed due to: {e}\")\nE           Failed: ‚ùå Purchase Invoice test failed due to: Message:\n\nPYTEST\\tests\\Purchase_Inv_test.py:49: Failed"}, "description": "Logs in, navigates to Product Master, adds 10 products, and generates a purchase invoice.", "steps": [{"name": "Generate purchase invoice from CSV products", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"d:\\Code Playground\\Selenium Tutorial\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"D:\\Code Playground\\Selenium Tutorial\\PYTEST\\pages\\Purchase_Invoice.py\", line 90, in generate_invoice\n    save_invoice_btn = wait.until(\n        EC.element_to_be_clickable((By.XPATH, \"//button[contains(@class,'btn-info') and contains(text(),'SAVE')]\"))\n    )\n  File \"d:\\Code Playground\\Selenium Tutorial\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 138, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "attachments": [{"name": "Barcode Entry", "source": "b5710eaf-5eb2-407e-8d52-fec20904c84d-attachment.txt", "type": "text/plain"}, {"name": "Barcode Entry", "source": "dd3b9a3e-1964-43ef-a10a-547ae4f4c507-attachment.txt", "type": "text/plain"}, {"name": "Barcode Entry", "source": "570ab838-a901-40bc-a545-83f40f28d664-attachment.txt", "type": "text/plain"}, {"name": "Barcode Entry", "source": "7a3ec3ae-e971-488d-8978-a47ebae86b7e-attachment.txt", "type": "text/plain"}, {"name": "Barcode Entry", "source": "24e9d5ac-783f-4c4f-9db7-0010471da51a-attachment.txt", "type": "text/plain"}, {"name": "Barcode Entry", "source": "b5ba8aed-2989-4d64-a715-1294cf0c7d79-attachment.txt", "type": "text/plain"}, {"name": "Barcode Entry", "source": "894c6674-da07-4225-82c4-a0b85d536606-attachment.txt", "type": "text/plain"}, {"name": "Barcode Entry", "source": "e7b25aeb-d21a-4cfc-a50f-b8b2336ea186-attachment.txt", "type": "text/plain"}, {"name": "Barcode Entry", "source": "dd107b19-f4ea-40b5-8086-ecc8efb6e021-attachment.txt", "type": "text/plain"}, {"name": "Barcode Entry", "source": "5e7ed42c-62d3-432b-ad41-79ab1302a67f-attachment.txt", "type": "text/plain"}], "start": 1761908634413, "stop": 1761908675940}], "attachments": [{"name": "Error Screenshot", "source": "f6771a89-e6cc-4fec-8eea-e4ce5dc673ae-attachment.png", "type": "image/png"}, {"name": "Error Details", "source": "41e08086-d97e-41f8-9c49-b907fdc93b60-attachment.txt", "type": "text/plain"}, {"name": "Screenshot_test_generate_purchase_invoice", "source": "b228c30f-fa4b-40c9-a9a2-a3eafce8e82b-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "0ad8b75a-d08f-44f3-b965-79757ad320e8-attachment.txt", "type": "text/plain"}], "start": 1761908623063, "stop": 1761908676094, "uuid": "c96a5642-a7c2-404b-a550-59206a3a73e6", "historyId": "bb6aeb3ebb9b82bca2a2d982c322c3ae", "testCaseId": "bb6aeb3ebb9b82bca2a2d982c322c3ae", "fullName": "PYTEST.tests.Purchase_Inv_test#test_generate_purchase_invoice", "labels": [{"name": "parentSuite", "value": "PYTEST.tests"}, {"name": "suite", "value": "Purchase_Inv_test"}, {"name": "host", "value": "DESKTOP-FK66NC3"}, {"name": "thread", "value": "4036-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "PYTEST.tests.Purchase_Inv_test"}], "titlePath": ["PYTEST", "tests", "Purchase_Inv_test.py"]}