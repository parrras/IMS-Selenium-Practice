{"name": "Login to IMS Application", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x9ffe43+66515]\n\tGetHandleVerifier [0x0x9ffe84+66580]\n\t(No symbol) [0x0x7edc48]\n\t(No symbol) [0x0x838704]\n\t(No symbol) [0x0x838aab]\n\t(No symbol) [0x0x87f482]\n\t(No symbol) [0x0x85b214]\n\t(No symbol) [0x0x87cba7]\n\t(No symbol) [0x0x85afc6]\n\t(No symbol) [0x0x82c2ca]\n\t(No symbol) [0x0x82d154]\n\tGetHandleVerifier [0x0xc57353+2521315]\n\tGetHandleVerifier [0x0xc522d3+2500707]\n\tGetHandleVerifier [0x0xa27c94+229924]\n\tGetHandleVerifier [0x0xa181f8+165768]\n\tGetHandleVerifier [0x0xa1ecad+193085]\n\tGetHandleVerifier [0x0xa08158+100072]\n\tGetHandleVerifier [0x0xa082f0+100480]\n\tGetHandleVerifier [0x0x9f25aa+11066]\n\tBaseThreadInitThunk [0x0x75ca5d49+25]\n\tRtlInitializeExceptionChain [0x0x7793d6db+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x7793d661+561]", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"124793217c53c736ad7c8653b23352b4\")>\n\n    @allure.title(\"Login to IMS Application\")\n    @allure.description(\"This test logs into the IMS application using valid credentials and verifies the dashboard.\")\n    def test_login_to_ims(setup):\n        driver= setup\n        login = Login(driver)\n        login.perform_login(\"Paras\", \"Ims@112334\")\n        print(\"Login process completed.\")\n        login.perform_logout()\n        print(\"logged out from the prev session\")\n        login.perform_ok()\n        login.click_signin()\n        # Wait for dashboard to load safely\n        wait = WebDriverWait(driver, 30)\n>       date_input = wait.until(\n            EC.presence_of_element_located((By.XPATH, \"//input[@type='date' and @id='Date']\"))\n        )\n\ntests\\test_Login.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"124793217c53c736ad7c8653b23352b4\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x0000026E4CC79440>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x9ffe43+66515]\nE       \tGetHandleVerifier [0x0x9ffe84+66580]\nE       \t(No symbol) [0x0x7edc48]\nE       \t(No symbol) [0x0x838704]\nE       \t(No symbol) [0x0x838aab]\nE       \t(No symbol) [0x0x87f482]\nE       \t(No symbol) [0x0x85b214]\nE       \t(No symbol) [0x0x87cba7]\nE       \t(No symbol) [0x0x85afc6]\nE       \t(No symbol) [0x0x82c2ca]\nE       \t(No symbol) [0x0x82d154]\nE       \tGetHandleVerifier [0x0xc57353+2521315]\nE       \tGetHandleVerifier [0x0xc522d3+2500707]\nE       \tGetHandleVerifier [0x0xa27c94+229924]\nE       \tGetHandleVerifier [0x0xa181f8+165768]\nE       \tGetHandleVerifier [0x0xa1ecad+193085]\nE       \tGetHandleVerifier [0x0xa08158+100072]\nE       \tGetHandleVerifier [0x0xa082f0+100480]\nE       \tGetHandleVerifier [0x0x9f25aa+11066]\nE       \tBaseThreadInitThunk [0x0x75ca5d49+25]\nE       \tRtlInitializeExceptionChain [0x0x7793d6db+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7793d661+561]\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "description": "This test logs into the IMS application using valid credentials and verifies the dashboard.", "attachments": [{"name": "stdout", "source": "8613972b-e58b-4dc5-a552-d44ff6bb066a-attachment.txt", "type": "text/plain"}], "start": 1761735482541, "stop": 1761735543420, "uuid": "3e543db2-f3a3-4d35-8b25-c291ac3ea2ce", "historyId": "94f9355fbafb145354c32bf2ec0f21bd", "testCaseId": "94f9355fbafb145354c32bf2ec0f21bd", "fullName": "tests.test_Login#test_login_to_ims", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_Login"}, {"name": "host", "value": "DESKTOP-FK66NC3"}, {"name": "thread", "value": "6808-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_Login"}], "titlePath": ["tests", "test_Login.py"]}